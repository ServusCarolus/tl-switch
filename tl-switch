#!/bin/bash

# This is a help / error message that is called when things do not
# proceed as expected or as a default action.
message () {
    echo ""
    echo "usage: tl-switch yes [year]"
    echo "       tl-switch no"
    echo ""
    echo "       [year] is optional, with the form 20XX."
    echo "       Default is the newest TL release installed:"
    echo "           \"tl-switch yes\""
    echo "       For another release, include the year, e.g.:"
    echo "           \"tl-switch yes 2019\""
    echo "       For the system packages instead:"
    echo "           \"tl-switch no\""
    echo ""
    echo "This script is used to switch between vanilla TeXLive and the"
    echo "packaged version of TeXLive installed on a system, e.g. Debian,"
    echo "etc. See the README.md file for setup and installation."
    exit 1
}

# If the paths are not set up, abort with a message to RTFM.
if [ -e "/opt/tex/$USER" ]
then
    echo "Context switch path exists: /opt/tex/$USER"
else
    echo "You have not set up the ability to switch contexts."
    echo "See the README.md file for instructions on how to"
    echo "set up the context and install the script."
    message
fi

# If there is no argument for year, iterate through a decade of
# possible results and get the newest one.
if [ -z "$2" ]
then
# Start with the current year, then add one in case of testing
# a future release.
    texyear=$(date +"%Y")
    texyear=$((texyear+1))
# Give year a known initial value that will trigger a directory
# not found error if a valid install directory is absent.
        year=0
# Now pick whatever the most recent installed version may be.
# Scan the range from current year down to 2000.
    while (( $texyear > 1999 ))
    do
        installdir="/usr/local/texlive/$texyear"
        if   [ -d $installdir ]
        then
            year=$texyear
            break
        fi
        texyear=$((texyear-1))
    done
# If an argument for year exists, use that argument.
else
    year="$2"
fi

# Try to find the path for the context switch. If there are 32-bit
# binary files, use them. Otherwise, check for 64-bit files.
# If that fails, throw an error.
if [ "$1" = "yes" ]
then
    if [ -d "/usr/local/texlive/$year/bin/i386-linux" ]
    then
        target="/usr/local/texlive/$year/bin/i386-linux"
    elif [ -d "/usr/local/texlive/$year/bin/x86_64-linux" ]
    then
        target="/usr/local/texlive/$year/bin/x86_64-linux"
    else
        echo "Target binary directory does not exist."
        message
    fi
fi

# To do the vanilla switch, destroy the current link and
# create a new link in its place.
if [ "$1" = "yes" ]
then
    if [ -e "/opt/tex/$USER/bin" ]
    then
        rm "/opt/tex/$USER/bin"
        ln -s "$target" "/opt/tex/$USER/bin"
        echo "Resetting /opt/tex/$USER/bin to target:"
        echo "$target"
    else
        ln -s "$target" "/opt/tex/$USER/bin"
        echo "Setting /opt/tex/$USER/bin to target:"
        echo "$target"
    fi
# Otherwise, nuke the vanilla link.
elif [ "$1" = "no" ]
then
    rm "/opt/tex/$USER/bin"
    echo "Removing path: /opt/tex/$USER/bin"
    echo "System default TeXLive is now used."
# If the argument was something else, abort with a message.
else
    message
fi
